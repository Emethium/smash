webpackHotUpdate(0,{

/***/ 311:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuejs_auto_complete__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuejs_auto_complete___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vuejs_auto_complete__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jspdf__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jspdf___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jspdf__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__store__ = __webpack_require__(9);\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'serviceNotify',\n  components: {\n    Autocomplete: __WEBPACK_IMPORTED_MODULE_1_vuejs_auto_complete___default.a\n  },\n  data: function data() {\n    return {\n      kind: '',\n      company: '',\n      client: '',\n      plate: '',\n      done_at: '',\n      next_service: '',\n      day1: '',\n      day2: '',\n      month1: '',\n      month2: '',\n      year1: '',\n      year2: '',\n      email_subject: '',\n      email_body: '',\n      kinds: [],\n      companies: [],\n      vehicles: [],\n      clients: [],\n      services: [],\n      result: false,\n      currentPage: 1,\n      perPage: 6,\n      totalRows: 0\n    };\n  },\n  beforeCreate: function beforeCreate() {\n    if (!__WEBPACK_IMPORTED_MODULE_3__store__[\"a\" /* default */].state.isLogged) {\n      this.$router.push('/');\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/api/v1/service_types', { headers: { Authorization: localStorage.getItem('token') } }).then(function (response) {\n      _this.loading = true;\n      _this.$data.kinds = response.data.data;\n      _this.$data.kinds = _this.sortByKey(_this.$data.kinds, 'kind');\n    }).catch(function (e) {\n      _this.errors.push(e);\n    });\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/api/v1/companies', { headers: { Authorization: localStorage.getItem('token') } }).then(function (response) {\n      _this.loading = true;\n      _this.$data.companies = response.data.data;\n      _this.$data.companies = _this.sortByKey(_this.$data.companies, 'name');\n    }).catch(function (e) {\n      _this.errors.push(e);\n    });\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/api/v1/equipments', { headers: { Authorization: localStorage.getItem('token') } }).then(function (response) {\n      _this.loading = true;\n      _this.$data.vehicles = response.data.data;\n      _this.$data.vehicles = _this.sortByKey(_this.$data.vehicles, 'plate');\n    }).catch(function (e) {\n      _this.errors.push(e);\n    });\n    __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/api/v1/costumers', { headers: { Authorization: localStorage.getItem('token') } }).then(function (response) {\n      _this.loading = true;\n      _this.$data.clients = response.data.data;\n      _this.$data.clients = _this.sortByKey(_this.$data.clients, 'name');\n    }).catch(function (e) {\n      _this.errors.push(e);\n    });\n  },\n\n  methods: {\n    getRowCount: function getRowCount(items) {\n      return items.length;\n    },\n    formattedDisplay: function formattedDisplay(result) {\n      return result.plate;\n    },\n    formattedDisplayClient: function formattedDisplayClient(result) {\n      return result.name;\n    },\n    setAttributes: function setAttributes(vehicle) {\n      this.$data.plate = vehicle.selectedObject.plate;\n      this.$data.client = vehicle.selectedObject.proprietary;\n      this.$refs.autocompleteClient.display = vehicle.selectedObject.proprietary;\n    },\n    setAttributesClient: function setAttributesClient(client) {\n      this.$data.client = client.selectedObject.name;\n    },\n    sortByKey: function sortByKey(array, key) {\n      return array.sort(function (a, b) {\n        var x = a[key];\n        var y = b[key];\n        return x < y ? -1 : x > y ? 1 : 0;\n      });\n    },\n    clearText: function clearText() {\n      this.$data.kind = '';\n      this.$data.company = '';\n      this.$data.client = '';\n      this.$data.plate = '';\n      this.$data.done_at = '';\n      this.$data.next_service = '';\n      this.day1 = '';\n      this.day2 = '';\n      this.month1 = '';\n      this.month2 = '';\n      this.year1 = '';\n      this.year2 = '';\n      this.$refs.autocomplete.clearValues();\n      this.$refs.autocompleteClient.clearValues();\n      console.log('cleared all entry text fields');\n    },\n    showList: function showList() {\n      this.$data.result = true;\n    },\n    removeDuplicates: function removeDuplicates(originalArray, prop) {\n      var newArray = [];\n      var lookupObject = {};\n\n      for (var i in originalArray) {\n        lookupObject[originalArray[i][prop]] = originalArray[i];\n      }\n\n      for (i in lookupObject) {\n        newArray.push(lookupObject[i]);\n      }\n      return newArray;\n    },\n    goToEdit: function goToEdit(id) {\n      this.$router.push({ path: '/services/edit/' + id });\n    },\n    submitSearch: function submitSearch() {\n      var _this2 = this;\n\n      this.$data.result = false;\n      __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/api/v1/services/search', {\n        headers: {\n          Authorization: localStorage.getItem('token')\n        },\n        params: {\n          name: this.$data.kind,\n          company: this.$data.company,\n          costumer: this.$data.client,\n          equipment: this.$data.plate,\n          day1: this.$data.day1,\n          day2: this.$data.day2,\n          month1: this.$data.month1,\n          month2: this.$data.month2,\n          year1: this.$data.year1,\n          year2: this.$data.year2\n        }\n      }).then(function (response) {\n        _this2.$data.services = response.data.data;\n        _this2.$data.services = _this2.removeDuplicates(_this2.$data.services, 'costumer');\n      }).then(this.showList());\n    },\n    reverseString: function reverseString(s) {\n      return s.split('').reverse().join('');\n    },\n    sendEmails: function sendEmails() {\n      var _this3 = this;\n\n      __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/api/v1/notify/welcome', { headers: { Authorization: localStorage.getItem('token') } }).then(function (response) {\n        console.log(response);\n      }).catch(function (e) {\n        _this3.errors.push(e);\n      });\n    },\n    createQueryPdf: function createQueryPdf() {\n      var doc = new __WEBPACK_IMPORTED_MODULE_2_jspdf___default.a();\n      var j = 0;\n      var collumn = 0;\n      var token = new Date();\n\n      doc.setFontSize(12);\n      doc.text(55, 6, 'LISTA DE DESTINAT√ÅRIOS - DATA: ' + token.getDate() + '/' + token.getUTCMonth() + '/' + token.getFullYear() + '\\n\\n');\n      this.services.forEach(function (service, i) {\n        if (i % 15 === 0 && i !== 0 && collumn === 1) {\n          j = 0;\n          collumn = 0;\n          doc.addPage();\n        } else if (i % 15 === 0 && i !== 0 && collumn === 0) {\n          collumn = 1;\n          j = 0;\n        }\n        doc.text(20 + collumn * 85, 10 + j * 18, '----------------------------------------------------------\\n' + 'Cliente: ' + service.costumer + '\\n');\n        j++;\n      });\n      doc.save('lista_destinatarios_' + token.getDate() + '_' + token.getUTCMonth() + '_' + token.getFullYear() + '.pdf');\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///311\n");

/***/ })

})